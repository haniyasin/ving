import { Describe, ModelName } from '~/types';

export type VRQueryParams = {
    /** whether to include enumerated options for the props, defaults to `false` */
    includeOptions?: boolean,
    /** whether to include calculated properties, defaults to `false` */
    includeMeta?: boolean,
    /** which related records to include by relationship name */
    includeRelated?: string[],
    /** which extra calculations to perform and include */
    includeExtra?: string[],
    /** whether to include api endpoint links, defaults to `false` */
    includeLinks?: boolean,
};

export type VRGenericOptions<T extends ModelName> = {
    /** a function to run on error */
    onError?: (result: Record<string, any>) => void
    /** a function to run on success */
    onSuccess?: (result: Describe<T>) => void,
}

export type VRCreateOptions<T extends ModelName> = {
    /** a function to run on error */
    onError?: (result: Record<string, any>) => void,
    /** a function to run on creation of a record */
    onCreate?: (result: Describe<T>) => void,
}

export type VRUpdateOptions<T extends ModelName> = {
    /** a function to run on error */
    onError?: (result: Record<string, any>) => void,
    /** a function to run on update of a record */
    onUpdate?: (result: Describe<T>) => void,
}

export type VRDeleteOptions<T extends ModelName> = {
    /** a function to run on error */
    onError?: (result: Record<string, any>) => void,
    /** a function to run on delete of a record */
    onDelete?: (result: Describe<T>) => void,
    /** whether skipp having the user confirm deletion of a record, defaults to `false` */
    skipConfirm?: boolean,
}

export type VingRecordParams<T extends ModelName> = {
    /** the unique id of this record, it will be used when creating a pinia store to identify the data in memory */
    id?: string,
    /** the list of properties stored in the database for this record */
    props?: Describe<T>['props'],
    /** the list of api endpoint links for this record */
    links?: Describe<T>['links'],
    /** the list of special calculations performed on this record before the describe happened */
    meta?: Describe<T>['meta'],
    /** the list of enumerated prop options */
    options?: Describe<T>['options'],
    /** the list of related objects requested to be included */
    related?: Describe<T>['related'],
    /** query params to be used when interacting with api endpoints */
    query?: VRQueryParams,
    /** warnings generated by the record at describe */
    warnings?: Describe<T>['warnings'],
    /** the api endpoint used to create a record */
    createApi?: string | undefined,
    /** the api endpoint used to fetch the data for this record */
    fetchApi?: string | undefined,
    /** a function that should be executed after the fetch of the data for this record */
    onFetch?: (result: Describe<T>) => void,
    /** a function to run on creation of a record */
    onCreate?: (result: Describe<T>) => void,
    /** a function to run on update of a record */
    onUpdate?: (result: Describe<T>) => void,
    /** a function to run on delete of a record */
    onDelete?: (result: Describe<T>) => void,
    /** a function to run on error */
    onError?: (result: Record<string, any>) => void,
    /** whether to hide the error notifications from the user when interacting with api endpoints for this record, defaults to false */
    suppressErrorNotifications?: boolean,
}

export interface VingRecord<T extends ModelName> {
    /** the list of properties stored in the database for this record */
    props: Describe<T>['props'],
    /** the list of api endpoint links for this record */
    links?: Describe<T>['links'],
    /** the list of special calculations performed on this record before the describe happened */
    meta?: Describe<T>['meta'],
    /** the list of enumerated prop options */
    options?: Describe<T>['options'],
    /** the list of related objects requested to be included */
    related?: Describe<T>['related'],
    /** warnings generated by the record at describe */
    warnings: Describe<T>['warnings'],
    /** query params to be used when interacting with api endpoints */
    query?: VRQueryParams,
    /** the object that changes how this entire record behaves, it was passed in to the constructor */
    behavior: VingRecordParams<T>,
    /** stores the response from an api endpoint in the pinia store */
    setState(result: Describe<T>): void,
    /** displays warnings generated from the record */
    dispatchWarnings(): void,
    /** gets the creation endpoint */
    getCreateApi(): string,
    /** gets the fetch endpoint */
    getFetchApi(): string,
    /** fetches records for this record */
    fetch(): Promise<any>,
    /** saves a specific prop for this record */
    save<K extends keyof Describe<T>['props']>(name: K, value?: Describe<T>['props'][K]): Promise<any>,
    /** saves a subset of the props for this record */
    partialUpdate(props?: Describe<T>['props'], options?: VRUpdateOptions<T>): Promise<any>,
    /** saves all the props for this record */
    update(options?: VRUpdateOptions<T>): Promise<any>,
    /** create a new record in the db */
    create(props?: Describe<T>['props'], options?: VRCreateOptions<T>): Promise<any>,
    /** gets the api endpoint for this specific record */
    getSelfApi(): string,
    /** delete this record from the database */
    delete(options?: VRDeleteOptions<T>): Promise<any> | undefined
}