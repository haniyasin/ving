import type { UserModel } from '../server/drizzle/schema/User';
import type { UserRecord } from '../server/vingrecord/records/User';
import { RoleOptions } from '../server/vingschema/schemas/User';
import type { APIKeyModel } from '../server/drizzle/schema/APIKey';
import type { InferModel, AnyMySqlTable, AnyMySqlColumn } from '../server/drizzle/orm';
import type { Session } from '../server/session';

export type QueryFilter = {
    /** A list of props that can be searched via rest */
    queryable: AnyMySqlColumn[],
    /** A list of props that can be filtered by start and end range */
    ranged: AnyMySqlColumn[],
    /** A list of props that can be filtered based upon qualifiers */
    qualifiers: AnyMySqlColumn[],
}

type MakeModelMap<T extends Record<string, AnyMySqlTable>> = {
    [K in keyof T]: {
        model: T[K];
        select: InferModel<T[K], 'select'>;
        insert: InferModel<T[K], 'insert'>;
    };
};

export type ModelMap = MakeModelMap<{
    User: UserModel;
    APIKey: APIKeyModel;
}>;

export type ModelName = keyof ModelMap;

export type ModelSelect<T extends ModelName> = ModelMap[T]['select'];
export type ModelInsert<T extends ModelName> = ModelMap[T]['insert'];

export type AuthorizedUser = Session | UserRecord;

export type Roles = Pick<ModelSelect<'User'>, typeof RoleOptions[number]>;
export type ExtendedRoleOptions = keyof Roles | "public" | "owner" | string;

export type RoleProps = Roles & Pick<ModelSelect<'User'>, 'id' | 'password' | 'verifiedEmail'>;

export type vingOption = {
    /** The value to be stored for an enumerated option */
    value: string | boolean,
    /** The value to be displayed to the human for an enumerated option */
    label: string
}

export type DescribeParams = {
    /** a `Session` or `User` record */
    currentUser?: Session | UserRecord,
    /** a list of options that can be included in the result */
    include?: {
        /** Include enumerated prop options */
        options?: boolean,
        /** include related records by relationship name */
        related?: string[],
        /** include extra special data defined by the record */
        extra?: string[],
        /** include api links */
        links?: boolean,
        /** include calculated properties */
        meta?: boolean,
        /** ignore privileges and include private data */
        private?: boolean,
    }
}

export type DescribeListParams = {
    /** the number of items per page */
    itemsPerPage?: number,
    /** the page to fetch, defaults to `1` */
    page?: number,
    /** props to sort by */
    sortBy?: string[] | string,
    /** direction to sort, defaults to `asc`, but you can reverse it with `desc` */
    sortOrder?: 'asc' | 'desc',
    /** limit the total results to a number smaller than the complete set */
    maxItems?: number,
    /** a list of formatting options from DescribeParams */
    objectParams?: DescribeParams,
}


export type DescribeList<T extends ModelName> = {
    /** pagination data */
    paging: {
        /** the page number loaded */
        page: number
        /** the next page number available */
        nextPage: number
        /** the previous page number available */
        previousPage: number
        /** the number of items loaded per page */
        itemsPerPage: number
        /** the total number of items in the result set */
        totalItems: number
        /** the total number of pages in the result set */
        totalPages: number
    },
    /** the list of items or records */
    items: Describe<T>[]
}

export type Describe<T extends ModelName> = {
    /** stored database properties */
    props: Partial<ModelMap[T]['select']>
    /** api endpoint links */
    links?: Record<string, string>
    /** calculated properties */
    meta?: Record<string, any>
    /** extra special calculated items for this specific record */
    extra?: Record<string, any>
    /** enumerated options for props */
    options?: {
        [property in keyof Partial<ModelSelect<T>>]?: vingOption[]
    }
    /** related objects */
    related?: {
        [key: string]: Describe<T>
    }
    /** warnings generated by this record */
    warnings?: { code: number, message: string }[]
}

export type warning = {
    /** an error code for the type of error */
    code: number,
    /** a human readable message */
    message: string
    /** debugging data */
    data?: any
};